(quote((()) () () ((()))))
(1 2 3 a b c)
(* 3 6)
(define x 4)
(define y (4 5 6))
(set! r (+ r r))
(let (a 1) (b 2) (c 3))
(if (= g 2) 1 0)
(lambda (u) (* u 9))
(begin (set! x 6) (set! y 7) (* x y))
(cond ((= x 0) 0) ((= x 1) 2) ((= x 2) 4))
(define (w u) (lambda (u) (* u 9)))
(define (w x) (cond ((= x 0) 0) ((= x 1) 2) ((= x 2) 4)))
(define (fac n) (if (= n 0) 1 (* n (fac (- n 1)))))
'(define (fac n) (if (= n 0) 1 (* n (fac (- n 1)))))
(quote (define (fac n) (if (= n 0) 1 (* n (fac (- n 1))))))


2---1----0--()
|   |    |
'   ()   ()

2---1---()
|   |
'   0--()
    |
    ()
